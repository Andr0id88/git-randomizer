name: Go Build Matrix

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - goos: linux
            arch: amd64
          - goos: linux
            arch: arm64
          - goos: darwin
            arch: amd64
          - goos: darwin
            arch: arm64
          - goos: windows
            arch: amd64

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.22"

    # -------- arch-scoped cache --------
    - name: Cache modules + build cache
      uses: actions/cache@v3
      with:
        # each arch gets its own directories
        path: |
          ~/go/pkg/mod/${{ matrix.goos }}-${{ matrix.arch }}
          ~/.cache/go-build/${{ matrix.goos }}-${{ matrix.arch }}
        key: |
          go-${{ matrix.goos }}-${{ matrix.arch }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          go-${{ matrix.goos }}-${{ matrix.arch }}-

    # -------- build --------
    - name: Build (${{ matrix.goos }}-${{ matrix.arch }})
      id: build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
        # point Go to our arch-specific cache dirs
        GOMODCACHE: ~/go/pkg/mod/${{ matrix.goos }}-${{ matrix.arch }}
        GOCACHE: ~/.cache/go-build/${{ matrix.goos }}-${{ matrix.arch }}
      run: |
        set -euo pipefail
        EXT=""
        if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
        OUT="gitr-${GOOS}-${GOARCH}${EXT}"
        go vet ./...
        go test ./... || true
        go build -v -o "$OUT" .
        echo "bin=$OUT" >> $GITHUB_OUTPUT

    # -------- upload --------
    - name: Upload artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build.outputs.bin }}
        path: ${{ steps.build.outputs.bin }}
        if-no-files-found: error

