name: Go Build Matrix

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - goos: linux   arch: amd64
          - goos: linux   arch: arm64
          - goos: darwin  arch: amd64
          - goos: darwin  arch: arm64
          - goos: windows arch: amd64

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.22"

    # -------- arch-scoped cache --------
    - name: Cache Go build & modules
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.HOME }}/.cache/gitr/${{ matrix.goos }}-${{ matrix.arch }}
        key: gitr-${{ matrix.goos }}-${{ matrix.arch }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          gitr-${{ matrix.goos }}-${{ matrix.arch }}-

    # -------- build (sets absolute cache paths) --------
    - name: Build (${{ matrix.goos }}-${{ matrix.arch }})
      id: build
      env:
        GOOS:   ${{ matrix.goos }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        set -euo pipefail

        # absolute per-arch cache dirs
        CACHE_BASE="$HOME/.cache/gitr/${GOOS}-${GOARCH}"
        export GOMODCACHE="$CACHE_BASE/gomod"
        export GOCACHE="$CACHE_BASE/gocache"
        mkdir -p "$GOMODCACHE" "$GOCACHE"

        EXT=""
        if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
        BIN="gitr${EXT}"

        go vet ./...
        go test ./... || true

        go build -v -o "$BIN" .

        DIST="dist/${GOOS}-${GOARCH}"
        mkdir -p "$DIST"
        mv "$BIN" "$DIST/$BIN"
        echo "dist=$DIST" >> "$GITHUB_OUTPUT"

    # -------- upload binary (action zips once) --------
    - name: Upload artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: gitr-${{ matrix.goos }}-${{ matrix.arch }}
        path: ${{ steps.build.outputs.dist }}
        if-no-files-found: error

