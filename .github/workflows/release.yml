name: Publish Release

on:
  push:
    tags: ["v*.*.*"]

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            arch: amd64
          - goos: linux
            arch: arm64
          - goos: darwin
            arch: amd64
          - goos: darwin
            arch: arm64
          - goos: windows
            arch: amd64
    outputs:
      goos: ${{ matrix.goos }}
      arch: ${{ matrix.arch }}

    # Define GOMODCACHE and GOCACHE paths directly using github.workspace
    # These will be unique per matrix job due to matrix vars in the path
    env:
      MATRIX_GOMODCACHE: ${{ github.workspace }}/.cache/go-mod-${{ matrix.goos }}-${{ matrix.arch }}
      MATRIX_GOCACHE: ${{ github.workspace }}/.cache/go-build-${{ matrix.goos }}-${{ matrix.arch }}

    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 0 }

    - uses: actions/setup-go@v5
      with:
        go-version: "1.22"
        cache: false # Explicitly disable setup-go's built-in cache

    - name: Cache Go Modules and Build Cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.MATRIX_GOMODCACHE }}
          ${{ env.MATRIX_GOCACHE }}
        key: go-${{ runner.os }}-${{ matrix.goos }}-${{ matrix.arch }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          go-${{ runner.os }}-${{ matrix.goos }}-${{ matrix.arch }}-

    - name: Build (${{ matrix.goos }}-${{ matrix.arch }})
      id: build_step
      # Pass the explicitly defined cache paths to the go build environment
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
        GOMODCACHE: ${{ env.MATRIX_GOMODCACHE }}
        GOCACHE: ${{ env.MATRIX_GOCACHE }}
      run: |
        set -euo pipefail

        echo "--- DEBUG INFORMATION ---"
        echo "Runner OS: ${{ runner.os }}"
        echo "matrix.goos: ${{ matrix.goos }}"
        echo "matrix.arch: ${{ matrix.arch }}"
        echo "HOME (shell): $HOME"
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "env.HOME (action context): ${{ env.HOME }}" # Check what Actions expression thinks HOME is

        echo "MATRIX_GOMODCACHE (job env): ${{ env.MATRIX_GOMODCACHE }}"
        echo "MATRIX_GOCACHE (job env): ${{ env.MATRIX_GOCACHE }}"

        echo "GOMODCACHE (for go build): $GOMODCACHE"
        echo "GOCACHE (for go build): $GOCACHE"

        echo "Initial 'go env' output:"
        go env
        echo "Specifically GOCACHE reported by 'go env GOCACHE': $(go env GOCACHE)"
        echo "Specifically GOMODCACHE reported by 'go env GOMODCACHE': $(go env GOMODCACHE)"
        echo "--- END DEBUG INFORMATION ---"

        # Ensure cache directories exist using the shell variables
        echo "Creating directories if they don't exist:"
        echo "mkdir -p \"$GOMODCACHE\""
        mkdir -p "$GOMODCACHE"
        echo "mkdir -p \"$GOCACHE\""
        mkdir -p "$GOCACHE"

        echo "Listing $GOMODCACHE parent:"
        ls -ld "$(dirname "$GOMODCACHE")" || echo "Cannot list parent of GOMODCACHE"
        echo "Listing $GOCACHE parent:"
        ls -ld "$(dirname "$GOCACHE")" || echo "Cannot list parent of GOCACHE"


        EXT=""
        if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
        PROJECT_NAME="gitr" # Replace 'gitr' with your actual project name if different
        BIN_FILENAME="${PROJECT_NAME}-${GOOS}-${GOARCH}${EXT}"
        CHECKSUM_FILENAME="${BIN_FILENAME}.sha256"
        ARTIFACT_NAME="build-${GOOS}-${GOARCH}"

        mkdir -p dist # Create dist directory for outputs

        echo "Building for $GOOS/$GOARCH into dist/$BIN_FILENAME..."
        go build -v -ldflags="-s -w" -o "dist/$BIN_FILENAME" .

        echo "Generating checksum for dist/$BIN_FILENAME..."
        (cd dist && sha256sum "$BIN_FILENAME" > "$CHECKSUM_FILENAME")

        echo "Binary path: dist/$BIN_FILENAME"
        echo "Checksum path: dist/$CHECKSUM_FILENAME"
        echo "Artifact name: $ARTIFACT_NAME"

        echo "bin_path=dist/$BIN_FILENAME" >> "$GITHUB_OUTPUT"
        echo "checksum_path=dist/$CHECKSUM_FILENAME" >> "$GITHUB_OUTPUT"
        echo "artifact_upload_name=${ARTIFACT_NAME}" >> "$GITHUB_OUTPUT"
        echo "bin_filename=${BIN_FILENAME}" >> "$GITHUB_OUTPUT"
        echo "checksum_filename=${CHECKSUM_FILENAME}" >> "$GITHUB_OUTPUT"

    - name: Upload Build Artifact (${{ matrix.goos }}-${{ matrix.arch }})
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build_step.outputs.artifact_upload_name }}
        path: |
          ${{ steps.build_step.outputs.bin_path }}
          ${{ steps.build_step.outputs.checksum_path }}
        retention-days: 1

  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare Release Assets
      id: prep_assets
      run: |
        set -euo pipefail
        mkdir -p release_assets
        FINAL_CHECKSUM_FILE="checksums.txt"

        find artifacts/build-*/* -type f ! -name '*.sha256' -exec cp {} release_assets/ \;
        find artifacts/build-*/* -type f -name '*.sha256' -print0 | sort -z | xargs -0 cat > "release_assets/$FINAL_CHECKSUM_FILE"

        echo "Files prepared in release_assets:"
        ls -lR release_assets/
        echo "Contents of release_assets/$FINAL_CHECKSUM_FILE:"
        cat "release_assets/$FINAL_CHECKSUM_FILE"

        echo "asset_path=release_assets/*" >> "$GITHUB_OUTPUT"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: Release ${{ github.ref_name }}
        body: |
          Automated release for ${{ github.ref_name }}
          See attached assets.
        draft: false
        prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
        files: ${{ steps.prep_assets.outputs.asset_path }}
        fail_on_unmatched_files: true
